package com.akexorcist.sleepingforless.constant;

/**
 * Created by Akexorcist on 3/10/2016 AD.
 */
public class TestConstant {
    public static final String TEST1 = "<div class=\\\"separator\\\" style=\\\"clear: both; text-align: center;\\\">\\n</div>\\n<br />\\n<div class=\\\"separator\\\" style=\\\"clear: both; text-align: center;\\\">\\n<a href=\\\"https://2.bp.blogspot.com/-6mxvwm3QFSs/VtLWwOSXcLI/AAAAAAAA5YQ/_kg1rt6wsKk/s1600/header.jpg\\\" imageanchor=\\\"1\\\" style=\\\"margin-left: 1em; margin-right: 1em;\\\"><img border=\\\"0\\\" height=\\\"272\\\" src=\\\"https://2.bp.blogspot.com/-6mxvwm3QFSs/VtLWwOSXcLI/AAAAAAAA5YQ/_kg1rt6wsKk/s1000/header.jpg\\\" width=\\\"640\\\" /></a></div>\\n<br />\\n<div style=\\\"text-align: center;\\\">\\n<span style=\\\"color: #cc0000;\\\">\\\"The number of method references in a .dex file cannot exceed 64K\\\"</span></div>\\n<br />\\n&nbsp; &nbsp; &nbsp; &nbsp; I think most android developer have been seen this error message before. This problem occurs when build android project to APK file.<br />\\n<br />\\n&nbsp; &nbsp; &nbsp; &nbsp; What does it mean? Why it happens? and how can we fix it?<br />\\n<br />\\n<a name='more'></a><h3>\\nAn introduction to the .dex file</h3>\\n&nbsp; &nbsp; &nbsp; &nbsp; In java, when .java was compiled it will be .class file to execute with Java VM. But Android use Dalvik VM (pre-lollipop) instead of Java VM to execute .dex file that compressed from .class file because it compact and suitable for mobile device like as smartphone more than .class file.<br />\\n<br />\\n&nbsp; &nbsp; &nbsp; &nbsp; So when android application was compiled. The .java file will compiled to .class and compiled to .dex again. Then it will zip with resource file to .apk file.<br />\\n<div class=\\\"separator\\\" style=\\\"clear: both; text-align: center;\\\">\\n<a href=\\\"https://2.bp.blogspot.com/-YBckoh2DDvA/VsNpreIdnwI/AAAAAAAA5KE/yW_UipxQYF4/s1600/001.jpg\\\" imageanchor=\\\"1\\\" style=\\\"margin-left: 1em; margin-right: 1em;\\\"><br class=\\\"Apple-interchange-newline\\\" /><img border=\\\"0\\\" height=\\\"170\\\" src=\\\"https://2.bp.blogspot.com/-YBckoh2DDvA/VsNpreIdnwI/AAAAAAAA5KE/yW_UipxQYF4/s1000/001.jpg\\\" width=\\\"640\\\" /></a></div>\\n<div>\\n<br /></div>\\n<div>\\n&nbsp; &nbsp; &nbsp; &nbsp; The limitation of .dex file is maximum method count support in this file is only 65,536 methods. These include the android framework, 3rd-party library and your code.</div>\\n<div>\\n<br /></div>\\n<h3>\\nExceed 65K Method that means method count more than 65,536 methods</h3>\\n<div>\\n&nbsp; &nbsp; &nbsp; &nbsp; That's it! This problem because of limitation of .dex file. Sometime you may have seen 65K or 64K wording. That are same because 65,536 / 1.024 = 64,000.</div>\\n<div>\\n<br /></div>\\n<div>\\n<div class=\\\"separator\\\" style=\\\"clear: both; text-align: center;\\\">\\n<a href=\\\"https://4.bp.blogspot.com/-kcrrfomw40w/VsP2yw2ql9I/AAAAAAAA5KY/3BG83db1wq0/s1600/002.jpg\\\" imageanchor=\\\"1\\\" style=\\\"margin-left: 1em; margin-right: 1em;\\\"><img border=\\\"0\\\" height=\\\"234\\\" src=\\\"https://4.bp.blogspot.com/-kcrrfomw40w/VsP2yw2ql9I/AAAAAAAA5KY/3BG83db1wq0/s1000/002.jpg\\\" width=\\\"640\\\" /></a></div>\\n</div>\\n<div>\\n<br /></div>\\n<div>\\n&nbsp; &nbsp; &nbsp; &nbsp; So it's normally if your big project stuck in this problem. If your project isn't large too much. I think you should check your project by follow this article.</div>\\n<div>\\n<br /></div>\\n<h3>\\nNever seen this problem before?</h3>\\n<div>\\n&nbsp; &nbsp; &nbsp; &nbsp; Let's try to add this dependencies in your test project.</div>\\n<div>\\n<br />\\n<pre style=\\\"border-radius: 0.5em; border: 2px dashed rgb(58, 121, 127); font-size: 12px; padding: 20px;\\\"><code class=\\\"language-java\\\">compile 'com.google.android.gms:play-services:8.4.0'\\ncompile 'com.android.support:design:23.1.1'\\ncompile 'com.android.support:cardview-v7:23.1.1'\\ncompile 'com.android.support:recyclerview-v7:23.1.1'\\ncompile 'com.android.support:appcompat-v7:23.1.1'\\ncompile 'com.android.support:support-v4:23.1.1'\\ncompile 'com.android.support:gridlayout-v7:23.1.1'\\ncompile 'com.android.support:mediarouter-v7:23.1.1'\\ncompile 'com.android.support:palette-v7:23.1.1'\\ncompile 'com.android.support:preference-v7:23.1.1'\\ncompile 'com.android.support:support-v13:23.1.1'\\ncompile 'com.android.support:preference-v14:23.1.1'\\ncompile 'com.android.support:preference-leanback-v17:23.1.1'\\ncompile 'com.android.support:leanback-v17:23.1.1'\\ncompile 'com.android.support:support-annotations:23.1.1'\\ncompile 'com.android.support:customtabs:23.1.1'\\ncompile 'com.android.support:percent:23.1.1'\\ncompile 'com.squareup:otto:1.3.8'\\ncompile 'com.squareup.picasso:picasso:2.5.2'\\ncompile 'com.squareup.retrofit2:retrofit:2.0.0-beta4'\\ncompile 'com.squareup.okhttp3:okhttp:3.0.1'\\n</code></pre>\\n<div>\\n<br /></div>\\n</div>\\n<div>\\n&nbsp; &nbsp; &nbsp; &nbsp; Set minimum SDK version to 17 or higher and run it. You will see how this problem occurs.</div>\\n<div>\\n<br /></div>\\n<h3>\\nHow can we fix it?</h3>\\n<div>\\n&nbsp; &nbsp; &nbsp; &nbsp; Most developer fix this problem by use MultiDex. In fact. It shouldn't always use MultiDex. but you can try to use another way to fix this problem before.</div>\\n<div>\\n<br /></div>\\n<h4>\\n1. Reduce dependencies in your project</h4>\\n<div>\\n&nbsp; &nbsp; &nbsp; &nbsp; Because of exceeding method count in your project. So you should fix the problem by reduce dependencies first.</div>\\n<div>\\n<br /></div>\\n<div>\\n&nbsp; &nbsp; &nbsp; &nbsp; Check your project that contain with unused dependencies or not. If any dependencies can reduce or replace with another dependencies that compact than it, do it.&nbsp;For example, I found some projects are use Picasso and Glide together. Why don't you use one at all?</div>\\n<div>\\n<br /></div>\\n<div>\\n&nbsp; &nbsp; &nbsp; &nbsp; Most problems that I found from another developers is use Google Play Services in them project like this.</div>\\n<div>\\n<br />\\n<pre style=\\\"border-radius: 0.5em; border: 2px dashed rgb(58, 121, 127); font-size: 12px; padding: 20px;\\\"><code class=\\\"language-java\\\">compile 'com.google.android.gms:play-services:8.4.0'</code></pre>\\n</div>\\n<div>\\n<code class=\\\"language-java\\\"><br /></code></div>\\n<div>\\n&nbsp; &nbsp; &nbsp; &nbsp; A pack of Google Play Services dependencies is very big, contain with 58,180 method!!<br />\\n<br />\\n&nbsp; &nbsp; &nbsp; &nbsp; So the best way is choosing only some dependencies in Google Play Services that you really want to use it.<br />\\n<br />\\n<pre style=\\\"border-radius: 0.5em; border: 2px dashed rgb(58, 121, 127); font-size: 12px; padding: 20px;\\\"><code class=\\\"language-java\\\">compile 'com.google.android.gms:play-services-location:8.4.0'\\ncompile 'com.google.android.gms:play-services-maps:8.4.0'\\ncompile 'com.google.android.gms:play-services-ads:8.4.0'\\n</code></pre>\\n<div>\\n<code class=\\\"language-java\\\"><br /></code></div>\\n&nbsp; &nbsp; &nbsp; &nbsp; These dependencies are use only 27,766 methods. It look still too much method count for me but it is inevitable, because these dependencies are required some important dependencies such as Android Support v4, Base Google Play Services and Support Annotation.<br />\\n<br />\\n<div class=\\\"separator\\\" style=\\\"clear: both; text-align: center;\\\">\\n<a href=\\\"https://1.bp.blogspot.com/-mZT6QE__dMg/VsP6I280FAI/AAAAAAAA5Kk/b5u68Re1EOg/s1600/003.jpg\\\" imageanchor=\\\"1\\\" style=\\\"margin-left: 1em; margin-right: 1em;\\\"><img border=\\\"0\\\" height=\\\"274\\\" src=\\\"https://1.bp.blogspot.com/-mZT6QE__dMg/VsP6I280FAI/AAAAAAAA5Kk/b5u68Re1EOg/s1000/003.jpg\\\" width=\\\"640\\\" /></a></div>\\n<br />\\n&nbsp; &nbsp; &nbsp; &nbsp; Dependencies reducing by remove unnecessary dependencies is very important. You should do it first before use another way. Not only fix the exceed method count problem, but project building with gradle will be faster.<br />\\n<br />\\n<h3>\\n2. Set minimum SDK version to 21 or higher</h3>\\n&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;This isn't great way, if your application need to support pre-lollipop version. But if based-on lollipop version (May required any feature in Android Lollipop)<br />\\n<br />\\n&nbsp; &nbsp; &nbsp; &nbsp; Why it worked when change minimum SDK to 21? That's because of Android 5.0 or higher are use ART (Android Runtime) that supported MultiDex instead of Dalvik. So ART can support more than 65,536 methods.<br />\\n<br />\\n&nbsp; &nbsp; &nbsp; &nbsp; Inside the ART, when .class was compiled to .dex (Can be more than one). AOT (Ahead-of-Time) will compile .dex to .oat after that.<br />\\n<br />\\n<div class=\\\"separator\\\" style=\\\"clear: both; text-align: center;\\\">\\n<a href=\\\"https://4.bp.blogspot.com/-RFcrv5MSsO8/VsQc0CQqBoI/AAAAAAAA5K0/04g7qZ81PHI/s1600/004.jpg\\\" imageanchor=\\\"1\\\" style=\\\"margin-left: 1em; margin-right: 1em;\\\"><img border=\\\"0\\\" height=\\\"344\\\" src=\\\"https://4.bp.blogspot.com/-RFcrv5MSsO8/VsQc0CQqBoI/AAAAAAAA5K0/04g7qZ81PHI/s1000/004.jpg\\\" width=\\\"640\\\" /></a></div>\\n<br />\\n&nbsp; &nbsp; &nbsp; &nbsp; That why a project that required minimum SDK 21 will use ART and say goodbye to Over 65K Methods problem, yeah!<br />\\n<br />\\n<h4>\\n3. Use Proguard to reduce useless method</h4>\\n&nbsp; &nbsp; &nbsp; &nbsp; This solution is suits for Release build more than Debug build. Because it take a longer time and difficult to log analyze from LogCat.<br />\\n<br />\\n&nbsp; &nbsp; &nbsp; &nbsp; Normally, Proguard will shrink and Obfuscate the code when you build a project, so unused method will be removed (But you can keep some method or class by config a&nbsp;proguard-rules.pro file) and also reduce total method count of your project.<br />\\n<br />\\n<h4>\\n4. OK! I give up and use MultiDex</h4>\\n&nbsp; &nbsp; &nbsp; &nbsp; MultiDex is the last way, if 3 ways that I mentioned aren't suitable for you. MultiDex allows you to build an APK with Dalvik by contain with multiple .dex with over 65,536 methods. Google has publish the MultiDex library to support with pre-Lollipop that use Dalvik to build project to .apk by required Android SDK Build Tools version 21.1 or higher.<br />\\n<br />\\n<h3>\\nLimitation of MultiDex library</h3>\\n&nbsp; &nbsp; &nbsp; &nbsp; • May occurs ANR while app launching if .dex files too large.<br />\\n&nbsp; &nbsp; &nbsp; &nbsp; • Should be define minimum SDK to version 14 or higher.<br />\\n&nbsp; &nbsp; &nbsp; &nbsp; • MulitDex uses more memory and may crash while app running if allocation memory is over limit.<br />\\n&nbsp; &nbsp; &nbsp; &nbsp; • Take more build time when you build the project.<br />\\n<br />\\n<h3>\\nHow to use MultiDex in your project.</h3>\\n&nbsp; &nbsp; &nbsp; &nbsp; Add MultiDex dependencies in build.gradle your target module like this.<br />\\n<br />\\n<pre style=\\\"border-radius: 0.5em; border: 2px dashed rgb(58, 121, 127); font-size: 12px; padding: 20px;\\\"><code class=\\\"language-java\\\">android {\\n\\n    ...\\n    buildToolsVersion \\\"21.1.0\\\"\\n\\n    defaultConfig {\\n\\n        minSdkVersion 14\\n        ...\\n\\n        multiDexEnabled true\\n    }\\n    ...\\n}\\n\\ndependencies {\\n    \\n    ...\\n    compile 'com.android.support:multidex:1.0.0'\\n    \\n}</code></pre>\\n<br />\\n&nbsp; &nbsp; &nbsp; &nbsp; Don't forget use build tools 21.1.0 or higher version.<br />\\n<br />\\n&nbsp; &nbsp; &nbsp; &nbsp; In Android Manifest, &lt;application&gt; must use MultiDexApplication.<br />\\n<br />\\n<pre style=\\\"border-radius: 0.5em; border: 2px dashed rgb(58, 121, 127); font-size: 12px; padding: 20px;\\\"><code class=\\\"language-java\\\">&lt;?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?&gt;\\n&lt;manifest xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\"\\n    ...&gt;\\n    \\n    &lt;application\\n        ...\\n        android:name=\\\"android.support.multidex.MultiDexApplication\\\"&gt;\\n\\n        ...\\n\\n    &lt;/application&gt;\\n&lt;/manifest&gt;\\n</code></pre>\\n<br />\\n&nbsp; &nbsp; &nbsp; &nbsp; MultiDexApplication class will manage your project to support with multi .dex files.<br />\\n<br />\\n&nbsp; &nbsp; &nbsp; &nbsp; But if you're using custom Application class. Just declare MultiDex method in to your class by follow this.<br />\\n<br />\\n<pre style=\\\"border-radius: 0.5em; border: 2px dashed rgb(58, 121, 127); font-size: 12px; padding: 20px;\\\"><code class=\\\"language-java\\\">package com.akexorcist.multidextest;\\n\\nimport android.app.Application;\\nimport android.content.Context;\\nimport android.support.multidex.MultiDex;\\n\\npublic class MyApplication extends Application {\\n\\n    ...\\n    \\n    @Override\\n    protected void attachBaseContext(Context base) {\\n        super.attachBaseContext(base);\\n        MultiDex.install(this);\\n    }\\n}\\n</code></pre>\\n<br />\\n&nbsp; &nbsp; &nbsp; &nbsp; And then use your custom Application class instead of MultiDexApplication.<br />\\n<br />\\n<h3>\\nUse MultiDex while under development.</h3>\\n&nbsp; &nbsp; &nbsp; &nbsp; Because use MultiDex is take a long time to build a project. So don't use it when your project is under development. It should be use in production release only. But I recommend you to use ART in you under development project by set minimum SDK version to 21 or higher version by use Build Variant to separate build type between develop and production.<br />\\n<br />\\n<pre style=\\\"border-radius: 0.5em; border: 2px dashed rgb(58, 121, 127); font-size: 12px; padding: 20px;\\\"><code class=\\\"language-java\\\">...\\n\\nandroid {\\n    ...\\n\\n    productFlavors {\\n        develop {\\n            minSdkVersion 21\\n        }\\n        production {\\n            minSdkVersion 14\\n            multiDexEnabled true\\n        }\\n    }\\n\\n    ...\\n}\\n\\ndependencies {\\n\\n    ...\\n    compile 'com.android.support:multidex:1.0.0'\\n\\n}</code></pre>\\n<br />\\n<h3>\\nHow to check total method count in your project?</h3>\\n&nbsp; &nbsp; &nbsp; &nbsp; I use <a href=\\\"https://github.com/KeepSafe/dexcount-gradle-plugin\\\" target=\\\"_blank\\\">DexCount ny KeepSafe</a>, the gradle plugin to show method count after finish the gradle building. It's very easy to use it. Just declare like this into buid.gradle of your target module.<br />\\n<br />\\n<pre style=\\\"border-radius: 0.5em; border: 2px dashed rgb(58, 121, 127); font-size: 12px; padding: 20px;\\\"><code class=\\\"language-java\\\">buildscript {\\n    repositories {\\n        jcenter()\\n    }\\n\\n    dependencies {\\n        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.4.1'\\n    }\\n}\\n\\napply plugin: 'com.getkeepsafe.dexcount'\\n</code></pre>\\n<br />\\n&nbsp; &nbsp; &nbsp; &nbsp;When gradle building has finish, it will be show total method count in console window.<br />\\n<br />\\n<div class=\\\"separator\\\" style=\\\"clear: both; text-align: center;\\\">\\n<a href=\\\"https://4.bp.blogspot.com/-VdIEUNkdl-c/VsRxemzPJ_I/AAAAAAAA5Lg/bDHE0wmJdKk/s1600/005.jpg\\\" imageanchor=\\\"1\\\" style=\\\"margin-left: 1em; margin-right: 1em;\\\"><img border=\\\"0\\\" src=\\\"https://4.bp.blogspot.com/-VdIEUNkdl-c/VsRxemzPJ_I/AAAAAAAA5Lg/bDHE0wmJdKk/s1000/005.jpg\\\" width=\\\"500\\\" /></a></div>\\n<br />\\n&nbsp; &nbsp; &nbsp; &nbsp; The report files is the one thing that I like it. Because it show how many method count in the each class in .txt files.<br />\\n<br />\\n<div class=\\\"separator\\\" style=\\\"clear: both; text-align: center;\\\">\\n<a href=\\\"https://3.bp.blogspot.com/-NnL-PHD6D2I/VsR2TKnKe_I/AAAAAAAA5MA/HUYw6YaTkMw/s1600/007.jpg\\\" imageanchor=\\\"1\\\" style=\\\"margin-left: 1em; margin-right: 1em;\\\"><img border=\\\"0\\\" height=\\\"122\\\" src=\\\"https://3.bp.blogspot.com/-NnL-PHD6D2I/VsR2TKnKe_I/AAAAAAAA5MA/HUYw6YaTkMw/s1000/007.jpg\\\" width=\\\"640\\\" /></a></div>\\n<div class=\\\"separator\\\" style=\\\"clear: both; text-align: center;\\\">\\n<a href=\\\"https://4.bp.blogspot.com/-J9cP0hksVd8/VsR2wjN0hnI/AAAAAAAA5MM/jLoBrHThORY/s1600/008.jpg\\\" imageanchor=\\\"1\\\" style=\\\"margin-left: 1em; margin-right: 1em;\\\"><img border=\\\"0\\\" height=\\\"367\\\" src=\\\"https://4.bp.blogspot.com/-J9cP0hksVd8/VsR2wjN0hnI/AAAAAAAA5MM/jLoBrHThORY/s800/008.jpg\\\" width=\\\"400\\\" /></a></div>\\n<br />\\n<h3>\\nHow can we check method count in the each dependencies?</h3>\\n&nbsp; &nbsp; &nbsp; &nbsp; You can check it by use&nbsp;<a href=\\\"http://www.methodscount.com/\\\" target=\\\"_blank\\\">Methods Count - Your solution for a perfectly fit APK</a>. Just put some dependency package that you want to know.<br />\\n<br />\\n<div class=\\\"separator\\\" style=\\\"clear: both; text-align: center;\\\">\\n<a href=\\\"https://3.bp.blogspot.com/-37Q2RvEbvVo/VsRyVtClFAI/AAAAAAAA5Lo/9wq5ITqFz1Q/s1600/006.jpg\\\" imageanchor=\\\"1\\\" style=\\\"margin-left: 1em; margin-right: 1em;\\\"><img border=\\\"0\\\" height=\\\"400\\\" src=\\\"https://3.bp.blogspot.com/-37Q2RvEbvVo/VsRyVtClFAI/AAAAAAAA5Lo/9wq5ITqFz1Q/s1000/006.jpg\\\" width=\\\"640\\\" /></a></div>\\n<br />\\n&nbsp; &nbsp; &nbsp; &nbsp; If open the website is too lazy for you. They also have the plugin for Android Studio. Just browse for the&nbsp;<a href=\\\"https://plugins.jetbrains.com/plugin/8076\\\" target=\\\"_blank\\\">Android Methods Count</a>&nbsp;plugin and get it.<br />\\n<br />\\n&nbsp; &nbsp; &nbsp; &nbsp; This plugin will show the blue circle symbol in the front of each dependencies. And it will show method count information when the mouse pointer hover on it.<br />\\n<br />\\n<div class=\\\"separator\\\" style=\\\"clear: both; text-align: center;\\\">\\n<a href=\\\"https://1.bp.blogspot.com/-YoqdJM16hDc/VsR0D9KzpJI/AAAAAAAA5L0/fMzGqEToSdQ/s1600/008.jpg\\\" imageanchor=\\\"1\\\" style=\\\"margin-left: 1em; margin-right: 1em;\\\"><img border=\\\"0\\\" height=\\\"180\\\" src=\\\"https://1.bp.blogspot.com/-YoqdJM16hDc/VsR0D9KzpJI/AAAAAAAA5L0/fMzGqEToSdQ/s1000/008.jpg\\\" width=\\\"640\\\" /></a></div>\\n<br />\\n<h3>\\nConclusion</h3>\\n&nbsp; &nbsp; &nbsp; &nbsp; It is common for big project to facing with the Over 65K Methods problem. (yeah, me too) But using MultiDex isn't the best way to solve this problem. It last way if you can fix this problem with another way. Reduce dependencies is the first thing that you have to do.<br />\\n<br />\\n&nbsp; &nbsp; &nbsp; &nbsp; And recommend you to use 3rd party plugin to make the method count checking more convenient.<br />\\n<br />\\n<br /></div>\\n";
}
